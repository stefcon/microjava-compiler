package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG;
terminal ASSIGN;
terminal LBRACKET, RBRACKET, LBRACE, RBRACE, LPAREN, RPAREN;
terminal SEMI, COMMA, DOT, COLON, ARROW;
terminal PRINT, READ, RETURN, PLUS; 
terminal VOID;
terminal WHILE, FOREACH, IF, ELSE, CONTINUE, BREAK;
terminal CONST;

terminal Integer NUMBER;
terminal Character CHAR;
terminal Boolean BOOL;
terminal String IDENT;

terminal PLUS, MINUS;
terminal INC, DEC;	 	
terminal MUL, DIV, MOD;				
terminal EQ, NE, GT, GE, LT, LE;
terminal OR, AND;

terminal CLASS, EXT;

nonterminal ProgDeclList, MethodDeclList;
nonterminal ConstDeclStart, ConstList, ConstDeclaration, ConstType;
nonterminal ProgVarDeclStart;
nonterminal VarDeclStart, VarList, VarName, VarDecl;
nonterminal FormalParamList, FormalParamDecl, FormParams, ActualPars, ActualParamList; 
nonterminal StatementList, Statement;
nonterminal Unmatched, Matched;
nonterminal IfConstruct, IfCondition;
nonterminal DesignatorStatement;

nonterminal Relop, Addop, Mulop; 	

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, Designator, MethodDecl, MethodTypeName; 
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Expr, Factor; 

/* solves the IF condition ambiguity */
precedence left ELSE;



Program ::= (Program) PROG ProgName:p ProgDeclList LBRACE MethodDeclList RBRACE 
;

ProgName ::= (ProgName) IDENT:pName 
;



ProgDeclList ::= (ProgListConst) ProgDeclList ConstDeclStart 
				 |
				 (ProgListVar) ProgDeclList ProgVarDeclStart /* bilo je list */
				 |
				 (NoProgDeclList)/* epsilon */
				 ;


ConstDeclStart ::= (ConstDeclarationStart) CONST Type:constType ConstList SEMI
;

ConstList ::= (ConstDeclarationList) ConstList COMMA ConstDeclaration
			  |
			  (BaseConstDeclarationList) ConstDeclaration
			  ;			  
			  
ConstDeclaration ::= (ConstDeclaration) IDENT EQUAL ConstType
;

ConstType ::= (ConstIntType) NUMBER
			  |
			  (ConstCharType) CHAR
			  |
			  (ConstBoolType) BOOL
			  ;
			   
			   
VarDeclStart ::= (VarDeclarationStart) Type VarList SEMI
;

VarList ::= (VarDeclarationList) VarList COMMA VarName
		    |
		    (BaseVarDeclarationList) VarName
		    ;
		    
VarName ::= (VarNameSingle) IDENT:varName
			|
			(VarNameArray) IDEN:varName LBRACKET RBRACKET
			;

		     
VarDeclList ::= (VarDeclarations) VarDeclList VarDeclStart
				|
				(NoVarDecl)/* epsilon */ 
				;		

			   
			   
ProgVarDeclList ::= (ProgVarDeclaration) Type ProgVarList SEMI
;


ProgVarList ::= (ProgVarList) ProgVarList COMMA ProgVarDeclaration
				|
				(BaseProgVarDeclaration) ProgVarDeclaration
				;
				
ProgVarAssignment ::= (ProgVar) VarDeclaration
;


Type ::= (Type) IDENT:typeName 
;


MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
				   |
				   (NoMethodDecl) /* epsilon */
				   ;

MethodDecl ::= (MethodDecl) MethodTypeName LPAREN FormParams RPAREN VarDeclList LBRACE StatementList RBRACE 
;

MethodTypeName ::= (MethodTypeName) Type:retType IDENT:methName
;

FormParams ::= (FormParams) FormalParamList
			   |
			   (NoFormParam) /* epsilon */
			   ;

FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl
					|
					(SingleFormalParamDecl) FormalParamDecl
					;
					
FormalParamDecl ::= (FormalParamDecl) Type IDENT
;


StatementList ::= (Statements) StatementList Statement 
				  |
				  (NoStmt) /* epsilon */
				  ;

/* Statement grammar */
Statement ::= (DesignatorStatement) DesignatorStatement SEMI
			  |
			  (WhileStatement) WhileConstruct
			  |
			  (PrintStatement) PRINT LPAREN Expr RPAREN SEMI
			  |
			  (PrintWidthStatement) PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI
			  |
			  (ReadStatement) READ LPAREN Designator RPAREN SEMI
			  |
			  (BreakStatement) BREAK SEMI
			  |
			  (ContinueStatement) CONTINUE SEMI
			  |
			  (ReturnStatement) RETURN SEMI
			  |
			  (ReturnExprStatement) RETURN Expr SEMI
			  |
			  (IfStatement) IfConstruct
			  |
			  (IfElseStatement) IfConstruct ELSE Statement
			  |
			  (BlockStatement) LBRACKET StatementList RBRACKET
			  ;

			  
IfConstruct ::= (IfConstruct) IF ControlCondition Statement
;			  

WhileConstruct ::= (WhileConstruct) WHILE ControlCondition Statement
;


ControlCondition ::= (ControlCondition) LPAREN Condition RPAREN
; /* error recovery kasnije */


/*
Unmatched ::= (UnmatchedIf) IF Expr Statement | (UnmatchedIfElse) IF Expr Matched ELSE Unmatched;
	
				  
Matched ::= (Assignment) Designator:dest EQUAL Expr:e SEMI 
			  |
			  (ErrAssignment) Designator EQUAL error SEMI
			  {: parser.log.debug("Uspesan oporavak od greske pri dodeli vrednosti."); :}
			  |
			  (PrintStmt) PRINT LPAREN Expr RPAREN SEMI 
			  |
			  (ReturnExpr) RETURN Expr:t SEMI
			  |
			  (ReturnNoExpr) RETURN SEMI
			  | 
			  (MatchedIf) IF Expr Matched ELSE Matched
			  |
			  (ProcCall) Designator:func LPAREN ActualPars RPAREN SEMI
			  ;
*/
			  
Expr ::= (AddExpr) Expr:te Addop Term:t
		 |
		 (TermExpr) Term:t
		 ;

Term ::= (Term) Factor:t 
;

/* Factor grammar */
Factor ::= (NumberConst) NUMBER
		   |
		   (BoolConst) BOOL
		   |
		   (CharConst) CHAR
		   |
		   (Var) Designator:d
		   |
		   (OperatorNew) NEW Type
		   |
		   (OperatorNewArr) NEW Type LBRACKET Expr RSQUARE
		   |
		   (FuncCall) FunctionCall
		   |
		   (ExprFactor) LPAREN Expr RPAREN
		   ;
		   
		   

ActualPars ::= (Actuals) ActualParamList 
			   | 
			   (NoActuals) /* epsilon */ 
			   ;
		
			   
ActualParamList ::= (ActualParams) ActualParamList COMMA Expr
					|
					(ActualParam) Expr
					;



DesignatorStatement ::= (AssignmentStatement) Designator AssignmentStatement
						|
						(DesignatorStmtFunctionCall) FunctionCall
						|
						(IncrementDesignator) Designator INC
						|
						(DecrimentDesignator) Designator DEC
						;
						
Designator ::= (Designator) IDENT:name
;

AssignmentStatement ::= (AssignmentExpr) ASSIGN Expr
; /* TODO: error handling */
					   	

FunctionCall ::= (FunctionCall) FunctionName LPAREN OptionalMethodActualParams RPAREN
;

FunctionName ::= (FunctionName) Designator
;

OptionalMethodActualParams ::=


Addop ::= (PlusOp) PLUS 
		  |
		  (MinusOp) MINUS
		  ;
		  
Relop ::= (EqualsOp) EQ
		  |
		  (NotEqualsOp) NE
		  |
		  (GreaterOp) GT
		  |
		  (LessOp) LT
		  |
		  (GreaterEqualOp) GE
		  |
		  (LessEqualOp) LE
		  ;
		  
Mulop ::= (MulOp) MUL
		  |
		  (DivOp) DIV
		  |
		  (ModOp) MOD
		  ;
