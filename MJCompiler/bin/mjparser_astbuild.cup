package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG;
terminal ASSIGN;
terminal LBRACKET, RBRACKET, LBRACE, RBRACE, LPAREN, RPAREN;
terminal SEMI, COMMA, DOT, COLON, ARROW;
terminal PRINT, READ, NEW; 
terminal VOID;
terminal WHILE, FOREACH, IF, ELSE, CONTINUE, BREAK, RETURN;
terminal CONST;

terminal Integer NUMBER;
terminal Character CHAR;
terminal Boolean BOOL;
terminal String IDENT;

terminal PLUS, MINUS;
terminal INC, DEC;	 	
terminal MUL, DIV, MOD;				
terminal EQ, NE, GT, GE, LT, LE;
terminal OR, AND;

terminal CLASS, EXT;

nonterminal ProgDeclList ProgDeclList;
nonterminal OptionalMethodDeclList OptionalMethodDeclList;
nonterminal MethodDeclList MethodDeclList;
nonterminal ConstDeclStart ConstDeclStart;
nonterminal ConstList ConstList;
nonterminal ConstDeclaration ConstDeclaration;
nonterminal ProgVarDeclStart ProgVarDeclStart;
nonterminal ProgVarType ProgVarType;
nonterminal ProgVarList ProgVarList;
nonterminal ProgVarDeclaration ProgVarDeclaration;

nonterminal ProgClassDecl ProgClassDecl;
nonterminal OptionalClassExtends OptionalClassExtends;
nonterminal OptionalClassMethodDecl OptionalClassMethodDecl;
nonterminal SuperClass SuperClass;
nonterminal ConstructorDeclList ConstructorDeclList;
nonterminal ConstructorDecl ConstructorDecl;
nonterminal ClassNewType ClassNewType;

nonterminal VarDeclStart VarDeclStart;
nonterminal VarDeclList VarDeclList;
nonterminal VarList VarList;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal FormalParams FormalParams; 
nonterminal OptionalStatementList OptionalStatementList;
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal IfConstruct IfConstruct;
nonterminal WhileConstruct WhileConstruct;
nonterminal ControlCondition ControlCondition;
nonterminal IfKeyWord IfKeyWord;
nonterminal WhileKeyWord WhileKeyWord;
nonterminal ElseKeyWord ElseKeyWord;
nonterminal OrKeyWord OrKeyWord;
nonterminal AndKeyWord AndKeyWord;
nonterminal ForeachKeyWord ForeachKeyWord;
nonterminal ForeachConstruct ForeachConstruct;
nonterminal ForeachDesignator ForeachDesignator;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal DesignatorListStart DesignatorListStart;
nonterminal DesignatorListContent DesignatorListContent;
nonterminal DesignatorDummy DesignatorDummy;
nonterminal DesignatorListStartDummy DesignatorListStartDummy;
nonterminal FunctionName FunctionName;
nonterminal OptionalMethodActualParams OptionalMethodActualParams;
nonterminal ActualParameter ActualParameter;
nonterminal ActualParamList ActualParamList;

nonterminal Relop Relop;
nonterminal Addop Addop;
nonterminal Mulop Mulop; 	

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, Designator, ForIdent, ConstType;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ClassName, ConstructorDeclStart, MethodDeclaration, MethodTypeAndName; 
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Expr, AssignmentStatementExpr, Factor, VarName;
nonterminal rs.etf.pp1.symboltable.concepts.Struct FunctionCall, Condition, ConditionTerm, ConditionFactor; 

/* solves the IF condition ambiguity */
precedence left ELSE;


Program ::= (Program) PROG ProgName:p ProgDeclList:P1 LBRACE OptionalMethodDeclList:O2 RBRACE {: RESULT=new Program(p, P1, O2); RESULT.setLine(pleft); :} 
;

ProgName ::= (ProgName) IDENT:pName {: RESULT=new ProgName(pName); RESULT.setLine(pNameleft); :} 
;



ProgDeclList ::= (ProgListConst) ProgDeclList:P1 ConstDeclStart:C2 {: RESULT=new ProgListConst(P1, C2); RESULT.setLine(P1left); :} 
				 |
				 (ProgListVar) ProgDeclList:P1 ProgVarDeclStart:P2 {: RESULT=new ProgListVar(P1, P2); RESULT.setLine(P1left); :}
				 |
				 (ProgListClass) ProgDeclList:P1 ProgClassDecl:P2 {: RESULT=new ProgListClass(P1, P2); RESULT.setLine(P1left); :}
				 |
				 (NoProgDeclList) {: RESULT=new NoProgDeclList(); :} /* epsilon */
				 ;


ConstDeclStart ::= (ConstDeclarationStart) CONST Type:constType ConstList:C1 SEMI {: RESULT=new ConstDeclarationStart(constType, C1); RESULT.setLine(constTypeleft); :}
;			



ConstList ::= (ConstDeclarationList) ConstList:C1 COMMA ConstDeclaration:C2 {: RESULT=new ConstDeclarationList(C1, C2); RESULT.setLine(C1left); :}
			  |
			  (BaseConstDeclarationList) ConstDeclaration:C1 {: RESULT=new BaseConstDeclarationList(C1); RESULT.setLine(C1left); :}
			  ;			  
			  
ConstDeclaration ::= (ConstDeclaration) IDENT:constName ASSIGN ConstType:C1 {: RESULT=new ConstDeclaration(constName, C1); RESULT.setLine(constNameleft); :}
;

ConstType ::= (ConstIntType) NUMBER:N1 {: RESULT=new ConstIntType(N1); RESULT.setLine(N1left); :}
			  |
			  (ConstCharType) CHAR:C1 {: RESULT=new ConstCharType(C1); RESULT.setLine(C1left); :}
			  |
			  (ConstBoolType) BOOL:B1 {: RESULT=new ConstBoolType(B1); RESULT.setLine(B1left); :}
			  ;
			   
			   
VarDeclStart ::= (VarDeclarationStart) Type:T1 VarList:V2 SEMI {: RESULT=new VarDeclarationStart(T1, V2); RESULT.setLine(T1left); :}
				 |
				 (VarDeclarationSemiError) error SEMI:l
				 {: parser.report_error("Oporavak od greske do ; na liniji " + lleft, null); :} {: RESULT=new VarDeclarationSemiError(); :}
				 ;


VarList ::= (VarDeclarationList) VarName:V1 COMMA VarList:V2 {: RESULT=new VarDeclarationList(V1, V2); RESULT.setLine(V1left); :}
		    |
		    (BaseVarDeclarationList) VarName:V1 {: RESULT=new BaseVarDeclarationList(V1); RESULT.setLine(V1left); :}
		    |
			(VarDeclarationCommaError) error COMMA:l
			{: parser.report_error("Oporavak od greske do , na liniji " + lleft, null); :}
			VarList:V1 {: RESULT=new VarDeclarationCommaError(V1); RESULT.setLine(V1left); :}
		    ;
		    
VarName ::= (VarNameSingle) IDENT:varName {: RESULT=new VarNameSingle(varName); RESULT.setLine(varNameleft); :}
			|
			(VarNameArray) IDENT:varName LBRACKET RBRACKET {: RESULT=new VarNameArray(varName); RESULT.setLine(varNameleft); :}
			;

		     
VarDeclList ::= (VarDeclarations) VarDeclList:V1 VarDeclStart:V2 {: RESULT=new VarDeclarations(V1, V2); RESULT.setLine(V1left); :}
				|
				(NoVarDecl) {: RESULT=new NoVarDecl(); :}/* epsilon */
				;		

			   
			   
ProgVarDeclStart ::= (ProgVarDeclarationStart) ProgVarType:P1 ProgVarList:P2 SEMI {: RESULT=new ProgVarDeclarationStart(P1, P2); RESULT.setLine(P1left); :} 
					 |
					 (ProgVarDeclarationSemiError) error SEMI:l
					 {: parser.report_error("Oporavak od greske do ; na liniji " + lleft, null); :} {: RESULT=new ProgVarDeclarationSemiError(); :}
					 ;



ProgVarType ::= (ProgVarType) Type:T1 {: RESULT=new ProgVarType(T1); RESULT.setLine(T1left); :}
;


ProgVarList ::= (ProgVarListRec) ProgVarDeclaration:P1 COMMA ProgVarList:P2 {: RESULT=new ProgVarListRec(P1, P2); RESULT.setLine(P1left); :}
				|
				(BaseProgVarDeclaration) ProgVarDeclaration:P1 {: RESULT=new BaseProgVarDeclaration(P1); RESULT.setLine(P1left); :}
				|
				(ProgVarDeclarationCommaError) error COMMA:l
				{: parser.report_error("Oporavak od greske do , na liniji " + lleft, null); :}
				ProgVarList:P1 {: RESULT=new ProgVarDeclarationCommaError(P1); RESULT.setLine(P1left); :}
				;
				
ProgVarDeclaration ::= (ProgVar) VarName:V1 {: RESULT=new ProgVar(V1); RESULT.setLine(V1left); :}
;


ProgClassDecl ::= (ClassDeclaration) ClassName:C1 OptionalClassExtends:O2 VarDeclList:V3 OptionalClassMethodDecl:O4 RBRACE {: RESULT=new ClassDeclaration(C1, O2, V3, O4); RESULT.setLine(C1left); :}
;

ClassName ::= (ClassName) CLASS IDENT:name {: RESULT=new ClassName(name); RESULT.setLine(nameleft); :}
;

OptionalClassExtends ::= (ClassExtends) EXT SuperClass:S1 LBRACE {: RESULT=new ClassExtends(S1); RESULT.setLine(S1left); :}
						 |
						 (NoClassExtends) /* epsilon */ LBRACE {: RESULT=new NoClassExtends(); :}
						 |
						 (ExtendsError) error LBRACE:l
						 {: parser.report_error("Oporavak od greske do LBRACE u liniji " + lleft, null); :} {: RESULT=new ExtendsError(); :}
						 ;

SuperClass ::= (SuperClassIdent) IDENT:name {: RESULT=new SuperClassIdent(name); RESULT.setLine(nameleft); :}
;
						 
OptionalClassMethodDecl ::= (ClassMethodDecl) LBRACE ConstructorDeclList:C1 OptionalMethodDeclList:O2 RBRACE {: RESULT=new ClassMethodDecl(C1, O2); RESULT.setLine(C1left); :}
							|
							(NoClassMethodDecl) {: RESULT=new NoClassMethodDecl(); :} /* epsilon */
							;


ConstructorDeclList ::= (ConstructorDeclarationList) ConstructorDeclList:C1 ConstructorDecl:C2 {: RESULT=new ConstructorDeclarationList(C1, C2); RESULT.setLine(C1left); :}
						|
						(ConstructorDeclarationEmpty) {: RESULT=new ConstructorDeclarationEmpty(); :} /* epsilon */
						;
						
ConstructorDecl ::= (ConstructorDeclarationInst) ConstructorDeclStart:C1 FormalParams:F2 RPAREN VarDeclList:V3 LBRACE OptionalStatementList:O4 RBRACE {: RESULT=new ConstructorDeclarationInst(C1, F2, V3, O4); RESULT.setLine(C1left); :}
;

					
ConstructorDeclStart ::= (ConstructorDeclarationStart) IDENT:I1 LPAREN {: RESULT=new ConstructorDeclarationStart(I1); RESULT.setLine(I1left); :}
;


/* Method declaration (definition) grammar */
OptionalMethodDeclList ::= (MethodDeclListExists) MethodDeclList:M1 {: RESULT=new MethodDeclListExists(M1); RESULT.setLine(M1left); :}
							|
							(NoMethodDeclList) {: RESULT=new NoMethodDeclList(); :} /* epsilon */
							;


MethodDeclList ::= (MethodDeclarations) MethodDeclList:M1 MethodDeclaration:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
				   |
				   (MethodDeclSingle) MethodDeclaration:M1 {: RESULT=new MethodDeclSingle(M1); RESULT.setLine(M1left); :}
				   ;

MethodDeclaration ::= (MethodDecl) MethodTypeAndName:M1 LPAREN FormalParams:F2 RPAREN VarDeclList:V3 LBRACE OptionalStatementList:O4 RBRACE {: RESULT=new MethodDecl(M1, F2, V3, O4); RESULT.setLine(M1left); :} 
					  |
					  (MethodDeclError) MethodTypeAndName:M1 LPAREN error RPAREN:l VarDeclList:V2 LBRACE OptionalStatementList:O3 RBRACE
					  {: parser.report_error("Oporavak od greske do RPAREN na liniji " + lleft, null); :} {: RESULT=new MethodDeclError(M1, V2, O3); RESULT.setLine(M1left); :}
					  ;

MethodTypeAndName ::= (MethodTypeName) Type:retType IDENT:methName {: RESULT=new MethodTypeName(retType, methName); RESULT.setLine(retTypeleft); :}
					  |
					  (MethodVoidName) VOID IDENT:methName {: RESULT=new MethodVoidName(methName); RESULT.setLine(methNameleft); :}
					  ;
				   

FormalParams ::= (OptFormalParams) FormalParamList:F1 {: RESULT=new OptFormalParams(F1); RESULT.setLine(F1left); :}
			   	 |
			     (NoFormalParam) {: RESULT=new NoFormalParam(); :} /* epsilon */
			     ;

FormalParamList ::= (FormalParamDecls) FormalParamDecl:F1 COMMA FormalParamList:F2 {: RESULT=new FormalParamDecls(F1, F2); RESULT.setLine(F1left); :}
					|
					(SingleFormalParamDecl) FormalParamDecl:F1 {: RESULT=new SingleFormalParamDecl(F1); RESULT.setLine(F1left); :}
					|
					(FormalParamListError) error COMMA:l
					{: parser.report_error("Oporavak od greske do , na liniji " + lleft, null); :}
				    FormalParamList:F1 {: RESULT=new FormalParamListError(F1); RESULT.setLine(F1left); :}
					;
					
FormalParamDecl ::= (FormalParamDeclSingle) Type:paramType IDENT:name {: RESULT=new FormalParamDeclSingle(paramType, name); RESULT.setLine(paramTypeleft); :}
					|
					(FormalParamDeclArray) Type:paramType IDENT:name LBRACKET RBRACKET {: RESULT=new FormalParamDeclArray(paramType, name); RESULT.setLine(paramTypeleft); :}
					;


/* Statement grammar */
OptionalStatementList ::= (OptStatementList) StatementList:S1 {: RESULT=new OptStatementList(S1); RESULT.setLine(S1left); :}
						  |
						  (NoStatementList) {: RESULT=new NoStatementList(); :} /* epsilon */
						  ;


StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :} 
				  |
				  (StatementSingle) Statement:S1 {: RESULT=new StatementSingle(S1); RESULT.setLine(S1left); :}
				  ;

Statement ::= (DesignatorStatementStmt) DesignatorStatement:D1 SEMI {: RESULT=new DesignatorStatementStmt(D1); RESULT.setLine(D1left); :}
			  |
			  (WhileStatement) WhileConstruct:W1 {: RESULT=new WhileStatement(W1); RESULT.setLine(W1left); :}
			  |
			  (ForeachStatement) ForeachConstruct:F1 {: RESULT=new ForeachStatement(F1); RESULT.setLine(F1left); :}
			  |
			  (PrintStatement) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new PrintStatement(E1); RESULT.setLine(E1left); :}
			  |
			  (PrintWidthStatement) PRINT LPAREN Expr:E1 COMMA NUMBER:N2 RPAREN SEMI {: RESULT=new PrintWidthStatement(E1, N2); RESULT.setLine(E1left); :}
			  |
			  (ReadStatement) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStatement(D1); RESULT.setLine(D1left); :}
			  |
			  (BreakStatement) BREAK SEMI {: RESULT=new BreakStatement(); :}
			  |
			  (ContinueStatement) CONTINUE SEMI {: RESULT=new ContinueStatement(); :}
			  |
			  (ReturnStatement) RETURN SEMI {: RESULT=new ReturnStatement(); :}
			  |
			  (ReturnExprStatement) RETURN Expr:E1 SEMI {: RESULT=new ReturnExprStatement(E1); RESULT.setLine(E1left); :}
			  |
			  (IfStatement) IfConstruct:I1 {: RESULT=new IfStatement(I1); RESULT.setLine(I1left); :}
			  |
			  (IfElseStatement) IfConstruct:I1 ElseKeyWord:E2 Statement:S3 {: RESULT=new IfElseStatement(I1, E2, S3); RESULT.setLine(I1left); :}
			  |
			  (BlockStatement) LBRACE OptionalStatementList:O1 RBRACE {: RESULT=new BlockStatement(O1); RESULT.setLine(O1left); :}
			  |
			  (StatementError) error SEMI:l
			  {: parser.report_error("Oporavak od greske do ; na liniji " + lleft, null); :} {: RESULT=new StatementError(); :} 
			  ;

			  
IfConstruct ::= (IfConstruct) IfKeyWord:I1 ControlCondition:C2 Statement:S3 {: RESULT=new IfConstruct(I1, C2, S3); RESULT.setLine(I1left); :}
;			  

IfKeyWord ::= (IfKeyWord) IF {: RESULT=new IfKeyWord(); :}
;

ElseKeyWord ::= (ElseKeyWord) ELSE {: RESULT=new ElseKeyWord(); :}
;

WhileConstruct ::= (WhileConstruct) WhileKeyWord:W1 ControlCondition:C2 Statement:S3 {: RESULT=new WhileConstruct(W1, C2, S3); RESULT.setLine(W1left); :}
;

WhileKeyWord ::= (WhileKeyWord) WHILE {: RESULT=new WhileKeyWord(); :}
;

ForeachConstruct ::= (ForeachConstruct) ForeachDesignator:F1 ForeachKeyWord:F2 LPAREN ForIdent:F3 ARROW Statement:S4 RPAREN SEMI {: RESULT=new ForeachConstruct(F1, F2, F3, S4); RESULT.setLine(F1left); :}
;

ForeachKeyWord ::= (ForeachKeyWord) FOREACH {: RESULT=new ForeachKeyWord(); :}
;

ForIdent ::= (ForIdent) IDENT:name {: RESULT=new ForIdent(name); RESULT.setLine(nameleft); :}
;

ForeachDesignator ::= (ForeachDesignator) Designator:D1 DOT {: RESULT=new ForeachDesignator(D1); RESULT.setLine(D1left); :}
;


ControlCondition ::= (ControlConditionValid) LPAREN Condition:C1 RPAREN {: RESULT=new ControlConditionValid(C1); RESULT.setLine(C1left); :}
					 |
					 (ControlConditionError) LPAREN error:l RPAREN
					 {: parser.report_error("Oporavak od greske do RPAREN na liniji " + lleft, null); :} {: RESULT=new ControlConditionError(); :}
					 ;



/* Condition hierarchy (AND > OR) */
Condition ::= (ConditionOr) Condition:C1 OrKeyWord:O2 ConditionTerm:C3 {: RESULT=new ConditionOr(C1, O2, C3); RESULT.setLine(C1left); :}
			  |
			  (ConditionSingle) ConditionTerm:C1 {: RESULT=new ConditionSingle(C1); RESULT.setLine(C1left); :}
			  ;
			  
ConditionTerm ::= (ConditionTermAnd) ConditionTerm:C1 AndKeyWord:A2 ConditionFactor:C3 {: RESULT=new ConditionTermAnd(C1, A2, C3); RESULT.setLine(C1left); :}
				  |
				  (ConditionTermSingle) ConditionFactor:C1 {: RESULT=new ConditionTermSingle(C1); RESULT.setLine(C1left); :}
				  ;
				  
ConditionFactor ::= (ConditionFactorRel) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new ConditionFactorRel(E1, R2, E3); RESULT.setLine(E1left); :}
					|
					(ConditionFactorSingle) Expr:E1 {: RESULT=new ConditionFactorSingle(E1); RESULT.setLine(E1left); :}
					;

OrKeyWord ::= (OrKeyWord) OR {: RESULT=new OrKeyWord(); :}
;

AndKeyWord ::= (AndKeyWord) AND {: RESULT=new AndKeyWord(); :}
;

		   

/* Designator */
DesignatorStatement ::= (AssignmentStatement) AssignmentStatementExpr:A1 {: RESULT=new AssignmentStatement(A1); RESULT.setLine(A1left); :}
						|
						(MultipleAssignmentStatement) DesignatorListStart:D1 Designator:D2 {: RESULT=new MultipleAssignmentStatement(D1, D2); RESULT.setLine(D1left); :}
						|
						(DesignatorStmtFunctionCall) FunctionCall:F1 {: RESULT=new DesignatorStmtFunctionCall(F1); RESULT.setLine(F1left); :}
						|
						(IncrementDesignator) Designator:D1 INC {: RESULT=new IncrementDesignator(D1); RESULT.setLine(D1left); :}
						|
						(DecrementDesignator) Designator:D1 DEC {: RESULT=new DecrementDesignator(D1); RESULT.setLine(D1left); :}
						;
						


AssignmentStatementExpr ::= (AssignmentExpr) Designator:D1 ASSIGN Expr:E2 {: RESULT=new AssignmentExpr(D1, E2); RESULT.setLine(D1left); :}
; /* TODO: error handling */
					   	

					   	
DesignatorListStart ::= (DesignatorListStart) DesignatorListStartDummy:D1 LBRACKET DesignatorListContent:D2 RBRACKET ASSIGN {: RESULT=new DesignatorListStart(D1, D2); RESULT.setLine(D1left); :}
;

DesignatorListStartDummy ::= (DesignatorListStartDummy) {: RESULT=new DesignatorListStartDummy(); :} /* epsilon */
; 

DesignatorListContent ::= (DesignatorListCommaElem) DesignatorDummy:D1 COMMA DesignatorListContent:D2 {: RESULT=new DesignatorListCommaElem(D1, D2); RESULT.setLine(D1left); :}
						  |
						  (DesignatorListDummy) DesignatorDummy:D1 {: RESULT=new DesignatorListDummy(D1); RESULT.setLine(D1left); :}
						  ;
			
DesignatorDummy ::= (DesignatorDummy) {: RESULT=new DesignatorDummy(); :} /* epsilon */
					|
					(DesignatorReal) Designator:D1 {: RESULT=new DesignatorReal(D1); RESULT.setLine(D1left); :}
					;			
					   	   	


Designator ::= (DesignatorSingle) IDENT:name {: RESULT=new DesignatorSingle(name); RESULT.setLine(nameleft); :}
			   |
			   (DesignatorArray) Designator:D1 LBRACKET Expr:E2 RBRACKET {: RESULT=new DesignatorArray(D1, E2); RESULT.setLine(D1left); :}
			   |
			   (DesignatorField) Designator:D1 DOT IDENT:rightField {: RESULT=new DesignatorField(D1, rightField); RESULT.setLine(D1left); :}
			   ;



FunctionCall ::= (FunctionCall) FunctionName:F1 OptionalMethodActualParams:O2 RPAREN {: RESULT=new FunctionCall(F1, O2); RESULT.setLine(F1left); :}
;

FunctionName ::= (FunctionName) Designator:D1 LPAREN {: RESULT=new FunctionName(D1); RESULT.setLine(D1left); :}
;

OptionalMethodActualParams ::= (OptMethodActualParams) ActualParamList:A1 {: RESULT=new OptMethodActualParams(A1); RESULT.setLine(A1left); :}
							   |
							   (NoMethodActualParams) {: RESULT=new NoMethodActualParams(); :} /* epsilon */
							   ;

ActualParamList ::= (ActualParamListRec) ActualParamList:A1 COMMA ActualParameter:A2 {: RESULT=new ActualParamListRec(A1, A2); RESULT.setLine(A1left); :}
					|
					(ActualParamSingle) ActualParameter:A1 {: RESULT=new ActualParamSingle(A1); RESULT.setLine(A1left); :}
					;							   							   

ActualParameter ::= (ActualParameter) Expr:exp {: RESULT=new ActualParameter(exp); RESULT.setLine(expleft); :}
;


Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :} 
;


/* Grammar for operands, based on priority (Mulop > Addop) */
Expr ::= (NegExpr) MINUS Term:T1 {: RESULT=new NegExpr(T1); RESULT.setLine(T1left); :}
		 |
		 (AddExpr) Expr:typeExpr Addop:A1 Term:t {: RESULT=new AddExpr(typeExpr, A1, t); RESULT.setLine(typeExprleft); :}
		 |
		 (TermExpr) Term:t {: RESULT=new TermExpr(t); RESULT.setLine(tleft); :}
		 ;

Term ::= (MulTerm) Term:T1 Mulop:M2 Factor:t {: RESULT=new MulTerm(T1, M2, t); RESULT.setLine(T1left); :}
		 | 
		 (FactorTerm) Factor:t {: RESULT=new FactorTerm(t); RESULT.setLine(tleft); :} 
		 ;

Factor ::= (ConstFactor) ConstType:C1 {: RESULT=new ConstFactor(C1); RESULT.setLine(C1left); :}
		   |
		   (DesignatorFactor) Designator:d {: RESULT=new DesignatorFactor(d); RESULT.setLine(dleft); :}
		   |
		   (OperatorNewClass) ClassNewType:C1 LPAREN OptionalMethodActualParams:O2 RPAREN {: RESULT=new OperatorNewClass(C1, O2); RESULT.setLine(C1left); :}
		   |
		   (OperatorNewArr) NEW Type:T1 LBRACKET Expr:E2 RBRACKET {: RESULT=new OperatorNewArr(T1, E2); RESULT.setLine(T1left); :}
		   |
		   (FactorFuncCall) FunctionCall:F1 {: RESULT=new FactorFuncCall(F1); RESULT.setLine(F1left); :}
		   |
		   (ExprFactor) LPAREN Expr:E1 RPAREN {: RESULT=new ExprFactor(E1); RESULT.setLine(E1left); :}
		   ;
		   
ClassNewType ::= (ClassNewType) NEW Type:T1 {: RESULT=new ClassNewType(T1); RESULT.setLine(T1left); :}
;

Addop ::= (PlusOp) PLUS {: RESULT=new PlusOp(); :} 
		  |
		  (MinusOp) MINUS {: RESULT=new MinusOp(); :}
		  ;
		  
Relop ::= (EqualsOp) EQ {: RESULT=new EqualsOp(); :}
		  |
		  (NotEqualsOp) NE {: RESULT=new NotEqualsOp(); :}
		  |
		  (GreaterOp) GT {: RESULT=new GreaterOp(); :}
		  |
		  (LessOp) LT {: RESULT=new LessOp(); :}
		  |
		  (GreaterEqualOp) GE {: RESULT=new GreaterEqualOp(); :}
		  |
		  (LessEqualOp) LE {: RESULT=new LessEqualOp(); :}
		  ;
		  
Mulop ::= (MultiplyOp) MUL {: RESULT=new MultiplyOp(); :}
		  |
		  (DivisionOp) DIV {: RESULT=new DivisionOp(); :}
		  |
		  (ModuloOp) MOD {: RESULT=new ModuloOp(); :}
		  ;
